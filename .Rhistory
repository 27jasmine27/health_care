"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
filter(df, Location == "United States") %>%
select(-Total, -Location)
}
overdose_age_groups2017 <- format_df(overdose_age_groups2017)
overdose_age_groups2016 <- format_df(overdose_age_groups2016)
overdose_age_groups2015 <- format_df(overdose_age_groups2015)
var <- paste0("overdose_age_groups", 2017)
test_data <- eval(parse(text = var))
# View(eval(parse(text = var)))
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(test_data)
library(dplyr)
library(plotly)
overdose_age_groups2017 <- read.csv(
"data/overdose_age_groups_state2017.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2016 <- read.csv(
"data/overdose_age_groups_state2016.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2015 <- read.csv(
"data/overdose_age_groups_state2015.csv",
stringsAsFactors = FALSE
)
# formats the data table given by changing column names and looking
# at all states
format_df <- function(df) {
colnames(df) <- c(
"Location",
"Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
filter(df, Location == "United States") %>%
select(-Total, -Location)
}
overdose_age_groups2017 <- format_df(overdose_age_groups2017)
overdose_age_groups2016 <- format_df(overdose_age_groups2016)
overdose_age_groups2015 <- format_df(overdose_age_groups2015)
var <- paste0("overdose_age_groups", 2015)
test_data <- eval(parse(text = var))
# View(eval(parse(text = var)))
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(test_data)
library(dplyr)
library(plotly)
overdose_age_groups2017 <- read.csv(
"data/overdose_age_groups_state2017.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2016 <- read.csv(
"data/overdose_age_groups_state2016.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2015 <- read.csv(
"data/overdose_age_groups_state2015.csv",
stringsAsFactors = FALSE
)
# formats the data table given by changing column names and looking
# at all states
format_df <- function(df) {
colnames(df) <- c(
"Location",
"Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
filter(df, Location == "United States") %>%
select(-Total, -Location)
}
overdose_age_groups2017 <- format_df(overdose_age_groups2017)
overdose_age_groups2016 <- format_df(overdose_age_groups2016)
overdose_age_groups2015 <- format_df(overdose_age_groups2015)
var <- paste0("overdose_age_groups", 2016)
test_data <- eval(parse(text = var))
# View(eval(parse(text = var)))
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(test_data)
library(dplyr)
library(plotly)
overdose_age_groups2017 <- read.csv(
"data/overdose_age_groups_state2017.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2016 <- read.csv(
"data/overdose_age_groups_state2016.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2015 <- read.csv(
"data/overdose_age_groups_state2015.csv",
stringsAsFactors = FALSE
)
# formats the data table given by changing column names and looking
# at all states
format_df <- function(df) {
colnames(df) <- c(
"Location",
"Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
filter(df, Location == "United States") %>%
select(-Total, -Location)
}
overdose_age_groups2017 <- format_df(overdose_age_groups2017)
overdose_age_groups2016 <- format_df(overdose_age_groups2016)
overdose_age_groups2015 <- format_df(overdose_age_groups2015)
var <- paste0("overdose_age_groups", 2016)
test_data <- eval(parse(text = var))
# View(eval(parse(text = var)))
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(test_data)
library(dplyr)
library(plotly)
overdose_age_groups2017 <- read.csv(
"data/overdose_age_groups_state2017.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2016 <- read.csv(
"data/overdose_age_groups_state2016.csv",
stringsAsFactors = FALSE
)
overdose_age_groups2015 <- read.csv(
"data/overdose_age_groups_state2015.csv",
stringsAsFactors = FALSE
)
# formats the data table given by changing column names and looking
# at all states
format_df <- function(df) {
colnames(df) <- c(
"Location",
"Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
filter(df, Location == "United States") %>%
select(-Total, -Location)
}
overdose_age_groups2017 <- format_df(overdose_age_groups2017)
overdose_age_groups2016 <- format_df(overdose_age_groups2016)
overdose_age_groups2015 <- format_df(overdose_age_groups2015)
var <- paste0("overdose_age_groups", 2015)
test_data <- eval(parse(text = var))
# View(eval(parse(text = var)))
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(test_data)
runApp()
library(dplyr)
library(plotly)
library(openintro)
overdose_age_groups <- read.csv(
"data/overdose_age_groups_state2017.csv",
stringsAsFactors = FALSE
)
colnames(overdose_age_groups) <- c(
"Location",
"Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"
)
overdose_age_groups[overdose_age_groups == "NSD"] <- "No sufficient data"
overdose_age_groups <- filter(overdose_age_groups, Location != "United States")
state_codes <- lapply(overdose_age_groups$Location, state2abbr)
overdose_age_groups$Location <- state_codes
View(overdose_age_groups)
runApp()
map code test
plot_geo(data = overdose_age_groups) %>%
add_trace(
z = ~overdose_age_groups[["Ages 55+"]],
locations = ~Location,
locationmode = "USA-states",
color = ~Total
) %>%
colorbar(title = "Overdoses") %>%
layout(
geo = list(scope = "usa"),
title = paste0("Opiod Overdoses in 2017 by State (", "Ages 55+", ")")
)
runApp()
shiny::runApp()
library(shiny)
library(shinythemes)
library(ggplot2)
library(dplyr)
source("overdose_map.R")
source("death_mapcode.R")
deaths_vs_time <- read.csv(
"data/drug_induced_deaths_1999-2015.csv",
stringsAsFactors = FALSE
)
colnames(deaths_vs_time)[1] = "state"
filtered_data <- filter(deaths_vs_time, state == "Washington")
plot_ly(filtered_data,
x = ~Year,
y = ~Deaths,
type = "scatter")
graph_state <- function(state_name = "Washington", data) {
filtered_data <- filter(data, state == state_name)
plot_graph <- plot_ly(
filtered_data,
x = ~Year, y = ~Deaths,
type = "scatter",
mode = "lines+markers"
)
return(plot_graph)
}
homepage <- tabPanel(
"Overview",
mainPanel(
h3(class = "title", "Overview"),
p("Our Shiny application was built in R Studio and contains
the major components used to create the variety of visualizations
used to help us answer our research questions."),
p("To begin, we used a heat map to show the extent of heroin overdoses
in different states, with color to show the amount of people, frequency,
and age. This is particularly useful because it gives a visual aid as
to where and what groups of people are in most need of help."),
p("Secondly, the next visualization we used was a bar chart.
This varied from the heat map because it highlights the various ages
of heroin users across the nation. Being able to change the view based
on specific age groups allows the user to see the true and unobscured data,
whereas the heat map shows the depth and severity of the problem. "),
p("Lastly, the other map that we used highlights the change in deaths from
2016 until now. This is useful because it highlights the severity and
growing issue that needs attention and changes to legislation. ")
)
)
page_one <- tabPanel(
"Overdose Map",
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "age", label = "Age Range",
choices = list("Ages 0-24",
"Ages 25-34",
"Ages 35-44",
"Ages 45-54",
"Ages 55+",
"Total"),
selected = "Total")
),
mainPanel(
plotlyOutput("overdose_map")
)
)
)
page_two <- tabPanel(
"Overdoses by Age Group",
titlePanel("Opiod Overdoses by Age Group 2015-2017"),
sidebarLayout(
sidebarPanel(
radioButtons("year",
label = "Year",
choices = c(2017, 2016, 2015)
)
),
mainPanel(
plotlyOutput("trendPlot"))
)
)
page_three <- tabPanel(
"Deaths Over Time",
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectInput("state",
label = "State:",
choices = state.name
)
),
mainPanel(
plotlyOutput("trendPlot"))
)
)
page_four <- tabPanel(
"Death Rate Change Map",
titlePanel("Change in Heroin-Related Death Rates 2016-2017"),
sidebarLayout(
sidebarPanel(
selectInput("category", "Category:",
c("stable - not significant" = "stable - not significant",
"increase" = "increase",
"did not meet inclusion criteria" = "did not meet inclusion criteria",
"decrease" = "decrease")
),
hr(),
h5("This is a static text")
),
mainPanel(
leafletOutput("mymap"))
)
)
page_five <- navbarMenu("More",
tabPanel("Q&A"),
tabPanel("Contact Us",
br(),
p("INFO 201 | Autumn 2019"),
hr(),
p("Adriane Phi,
Christian Diangco,
Jasmine Kennedy,
Jiaxian Xiang",
align = "center"),
p("Link to ", a(strong(code("INFO201-Final-Project")),
href = "https://github.com/Jessjx6/health_care"),
align = "center")
)
)
ui <- navbarPage(
theme = shinytheme("yeti"),
"Heroin Usage",
homepage,
page_one,
page_two,
page_three,
page_four,
page_five
)
server <- function(input, output) {
output$trendPlot <- renderPlotly(graph_state(input$state, deaths_vs_time))
output$overdose_map <- renderPlotly({
plot_geo(data = overdose_age_groups) %>%
add_trace(
z = ~overdose_age_groups[[input$age]],
locations = ~Location,
locationmode = "USA-states",
color = ~Total
) %>%
colorbar(title = "Overdoses") %>%
layout(
geo = list(scope = "usa"),
title = paste0("Opiod Overdoses in 2017 by State (", input$age, ")")
)
})
# death rate change map
output$mymap <- renderLeaflet({my_map <- leaflet(states) %>%
setView(-100, 40, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")})
proxy <- leafletProxy("mymap")
observe({
if(input$category != ""){
selected_polygon <- subset(states, states$category==input$category)
proxy %>% clearGroup("highlighted_polygon")
proxy %>% addPolylines(stroke=TRUE, weight = 4, color="red",
data=selected_polygon, group="highlighted_polygon")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot_ages <- function(df) {
plot_ly(
df,
x = ~colnames(df),
y = ~as.numeric(as.vector(df[1,])),
type = "bar"
) %>%
layout(
xaxis = list(title = "Age Groups"),
yaxis = list(title = "Number of Opiod Overdoses"),
title = "Opiod Overdoses in the US by age group"
)
}
plot_ages(overdose_age_groups2015)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(styler)
library("styler")
library("lintr")
#------------Setup-----------
library(styler)
syle_file(.)
style_file()
style_file("app.R")
runApp()
runApp()
style_file("app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
