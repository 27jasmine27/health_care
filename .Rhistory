# Create a data frame
write.csv(people,"./Data/new_people.csv",row.names=FALSE)
```
Natural Amenities Scale
====================================
source: ./R/example3.R
![Natural Amenities Scale](./images/amenities.png)
***
- Each county in the U.S. is ranked for beauty
- Investigate this data and develop some questions
- See source code and meta data on left
- We'll discuss problem sitation and data set in class
- We'll formulate some questions and try to answer them
- See: http://www.arfsys.com
Finished
====================================
- Manipuating tables is an essental task in data science
- Tables go into data vizulatations
- Tables go into maching learning algrithms
library(dplyr)
R Data Frames (continued)
========================================================
author: INFO-201
date:
autosize: true
Objectives
========================================================
- Describe the structure and purpose of data frames
- Create a data frame
- Create a data frame from a CSV file
- Given specific query tassk, access rows, columns, and data elements
- Begin to work with a real data set of reasonable size
- 3000 observations and 10 features
Recall: Creating a data fram in code
====================================
source: ./R/example2.R
```{r}
people_df <- data.frame(
name = c("Ada", "Bob", "Chris", "Diya", "Emma"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152),
stringsAsFactors = FALSE
)
print(people_df)
```
Complex filters
====================================
```{r}
# Get heights and weights as vectors
heights <- people_df[,"height"]
weights <- people_df[,"weight"]
# Test each element in vector
filter <- (heights >= 70) & (weights < 155)
# Generate result
result <- people_df[filter,]
print(result)
```
Complex filters
====================================
The predicate can be placed directly in the bracket notation
```{r}
result <- people_df[(people_df$height>=70) & (people_df$weight < 155),]
print(result)
```
Complex filter task
====================================
**Task:** Write a query which returns rows from ```people_df``` where:
(1) The _name_ of the person is "Ada"
(2) OR the _weight_ of the person is greater than 150.
Adding rows to data frames
====================================
```{r}
# Create a data frame
people <- read.csv( "./Data/people.csv",
header=TRUE,
stringsAsFactors=FALSE
)
# Create a new data frame
new_person <- data.frame(name="Bill",height=73,weight=155)
# Put them together (rbind - "row combine")
people <- rbind(people,new_person)
```
Adding rows to data frames (continued)
====================================
```{r}
print(people)
```
Saving a data frame
====================================
```{r}
# Create a data frame
write.csv(people,"./Data/new_people.csv",row.names=FALSE)
```
Natural Amenities Scale
====================================
source: ./R/example3.R
![Natural Amenities Scale](./images/amenities.png)
***
- Each county in the U.S. is ranked for beauty
- Investigate this data and develop some questions
- See source code and meta data on left
- We'll discuss problem sitation and data set in class
- We'll formulate some questions and try to answer them
- See: http://www.arfsys.com
Finished
====================================
- Manipuating tables is an essental task in data science
- Tables go into data vizulatations
- Tables go into maching learning algrithms
view(Titanic)
# In this section, you'll work with the `Titanic` data set, which
# is built into the R environment.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
Titanic
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic_df <- data.frame(Titanic, stringsAsFactors = FALSE)
View(titanic_df)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
shiny::runApp('Documents/info/health_care')
setwd("~/Documents/info/health_care")
runApp()
runApp()
runApp()
runApp()
setwd("~/")
setwd("~/Documents/info/health_care")
library(shiny)
library(shinythemes)
source("doc/mapcode.R")
page_one <- tabPanel(
"First Page", # label for the tab in the navbar
titlePanel("Page 1"), # show with a displayed title
)
page_two <- tabPanel(
"Second Page"
)
page_three <- tabPanel(
"Third Page",
titlePanel("Heroin-Related Overdose Deaths"),
selectInput("category", "Category:",
c("decrease" = "decrease",
"did not meet inclusion criteria" = "did not meet inclusion criteria",
"increase" = "increase",
"stable - not significant" = "stable - not significant"
)),
tags$style(type = "text/css", "#mymap {height: calc(100vh - 80px) !important;}"),
leafletOutput("mymap")
)
page_four <- navbarMenu("More",
tabPanel("Q&A"),
tabPanel("Contact Us")
)
ui <- navbarPage(
theme = shinytheme("yeti"),
"Drug Usage",
page_one,
page_two,
page_three,
page_four
)
server <- function(input, output) {
output$mymap <- renderLeaflet({my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")})
}
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
library(leaflet)
data <- read.csv(
'Statistically significant changes in drug overdose death rates involving heroin by select states, United States, 2016 to 2017.csv',
stringsAsFactors = FALSE, na.strings = 'n/a'
)
data <- data[, 1:8]
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
detail <- merge(states@data, data, by.x = 'name', by.y = 'state', all.x = TRUE)
detail[is.na(detail$category), ]$category <- 'did not meet inclusion criteria'
detail <- detail[order(detail$id), ]
states@data <- detail
pal <- colorFactor(
palette = "RdGy", domain = states$category,
levels = c(
"increase", "stable - not significant", "decrease",
"did not meet inclusion criteria"
)
)
labels <- sprintf(
"<strong>%s</strong><br/>
Category: %s<br/>
Percent Change from 2016-2017: %s<br/>
Statistically Significant: %s<br/>
2016 Number: %s<br/>
2016 Rate: %s<br/>
2017 Number: %s<br/>
2017 Rate: %s",
states$name, states$category, states$change, states$significant,
states$X2016number, states$X2016rate, states$X2017number, states$X2017rate
) %>% lapply(htmltools::HTML)
my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")
library(dplyr)
library(ggplot2)
library(leaflet)
data <- read.csv(
'Statistically significant changes in drug overdose death rates involving heroin by select states, United States, 2016 to 2017.csv',
stringsAsFactors = FALSE, na.strings = 'n/a'
)
data <- data[, 1:8]
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
detail <- merge(states@data, data, by.x = 'name', by.y = 'state', all.x = TRUE)
detail[is.na(detail$category), ]$category <- 'did not meet inclusion criteria'
detail <- detail[order(detail$id), ]
states@data <- detail
pal <- colorFactor(
palette = "RdGy", domain = states$category,
levels = c(
"increase", "stable - not significant", "decrease",
"did not meet inclusion criteria"
)
)
labels <- sprintf(
"<strong>%s</strong><br/>
Category: %s<br/>
Percent Change from 2016-2017: %s<br/>
Statistically Significant: %s<br/>
2016 Number: %s<br/>
2016 Rate: %s<br/>
2017 Number: %s<br/>
2017 Rate: %s",
states$name, states$category, states$change, states$significant,
states$X2016number, states$X2016rate, states$X2017number, states$X2017rate
) %>% lapply(htmltools::HTML)
my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
setwd("~/Documents/info/health_care/doc")
library(dplyr)
library(ggplot2)
library(leaflet)
data <- read.csv(
'Statistically significant changes in drug overdose death rates involving heroin by select states, United States, 2016 to 2017.csv',
stringsAsFactors = FALSE, na.strings = 'n/a'
)
data <- data[, 1:8]
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
detail <- merge(states@data, data, by.x = 'name', by.y = 'state', all.x = TRUE)
detail[is.na(detail$category), ]$category <- 'did not meet inclusion criteria'
detail <- detail[order(detail$id), ]
states@data <- detail
pal <- colorFactor(
palette = "RdGy", domain = states$category,
levels = c(
"increase", "stable - not significant", "decrease",
"did not meet inclusion criteria"
)
)
labels <- sprintf(
"<strong>%s</strong><br/>
Category: %s<br/>
Percent Change from 2016-2017: %s<br/>
Statistically Significant: %s<br/>
2016 Number: %s<br/>
2016 Rate: %s<br/>
2017 Number: %s<br/>
2017 Rate: %s",
states$name, states$category, states$change, states$significant,
states$X2016number, states$X2016rate, states$X2017number, states$X2017rate
) %>% lapply(htmltools::HTML)
my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")
library(shiny)
library(shinythemes)
source("doc/mapcode.R")
page_one <- tabPanel(
"First Page", # label for the tab in the navbar
titlePanel("Page 1"), # show with a displayed title
)
page_two <- tabPanel(
"Second Page"
)
page_three <- tabPanel(
"Third Page",
titlePanel("Heroin-Related Overdose Deaths"),
leafletOutput("mymap")
)
page_four <- navbarMenu("More",
tabPanel("Q&A"),
tabPanel("Contact Us")
)
ui <- navbarPage(
theme = shinytheme("yeti"),
"Drug Usage",
page_one,
page_two,
page_three,
page_four
)
server <- function(input, output) {
output$mymap <- renderLeaflet({my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
source("doc/mapcode.R")
page_one <- tabPanel(
"First Page", # label for the tab in the navbar
titlePanel("Page 1"), # show with a displayed title
)
page_two <- tabPanel(
"Second Page"
)
page_three <- tabPanel(
"Third Page",
titlePanel("Heroin-Related Overdose Deaths"),
selectInput("category", "Category:",
c("decrease" = "decrease",
"did not meet inclusion criteria" = "did not meet inclusion criteria",
"increase" = "increase",
"stable - not significant" = "stable - not significant"
)),
tags$style(type = "text/css", "#mymap {height: calc(100vh - 80px) !important;}"),
leafletOutput("mymap")
)
page_four <- navbarMenu("More",
tabPanel("Q&A"),
tabPanel("Contact Us")
)
ui <- navbarPage(
theme = shinytheme("yeti"),
"Drug Usage",
page_one,
page_two,
page_three,
page_four
)
server <- function(input, output) {
output$mymap <- renderLeaflet({my_map <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(category),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(
pal = pal,
values = ~category, opacity = 0.7, title = NULL,
position = "bottomright")})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Documents/info/health_care')
setwd("~/Documents/info/health_care/doc")
setwd("~/Documents/info/health_care")
data <- data[, 1:8]
runApp()
runApp()
runApp()
runApp()
runApp()
