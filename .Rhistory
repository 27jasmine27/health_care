Michigan,Mich.,MI
Minnesota,Minn.,MN
Mississippi,Miss.,MS
Missouri,Mo.,MO
Montana,Mont.,MT
Nebraska,Nebr.,NE
Nevada,Nev.,NV
New Hampshire,N.H.,NH
New ersey,N.J.,NJ
New Mexico,N.M.,NM
New York,N.Y.,NY
North Carolina,N.C.,NC
North Dakota,N.D.,ND
Ohio,Ohio,OH
Oklahoma,Okla.,OK
Oregon,Ore.,OR
Pennsylvania,Pa.,PA
Rhode Island,R.I.,RI
South Carolina,S.C.,SC
South Dakota,S.D.,SD
Tennessee,Tenn.,TN
Texas,Tex.,TX
Utah,Utah,UT
Vermont,Vt.,VT
Virginia,Va.,VA
Washington,Wash.,WA
West Virginia,W.Va.,WV
Wisconsin,Wis.,WI
Wyoming,Wyo.,WY
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_code            character   [Length: 2]
#    census_division_id    integer     [1 .. 8]
#
# Note: This data comes from: create_state_census_division_df()
#-----------------------------------------------------------------------------
create_state_code_census_division_df <- function() {
df <- read.csv(textConnection(
"state_code,census_division_id
AL,6
AZ,8
AR,7
CA,9
CO,8
CT,1
DE,5
DC,5
FL,5
GA,5
ID,8
IL,3
IN,3
IA,4
KS,4
KY,6
LA,7
ME,1
MD,5
MA,1
MI,3
MN,4
MS,6
MO,4
MT,8
NE,4
NV,8
NH,1
NJ,2
NM,8
NY,2
NC,5
ND,4
OH,3
OK,7
OR,9
PA,2
RI,1
SC,5
SD,4
TN,6
TX,7
UT,8
VT,1
VA,5
WA,9
WV,5
WI,3
WI,4
WY,8
"),
stringsAsFactors = FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Task #1: Write a function that returns the following data frame:
#    state_code
#    state_abbrev
#    state_name
#    state_census_id
#    state_census_name
#
# This will require that you combine data from two data frames. Use the dplyr
# join functions.
#
# See: ?join()
#-----------------------------------------------------------------------------
create_state_info_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #2: How many states are in each of the census divisions? Show the IDs and
# the names.
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #3: What is the following expression TRUE?  This this a problem? If so, what
# should be done?
#-----------------------------------------------------------------------------
if (nrow(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
df1
setwd("~/Documents/info/health_care")
shiny::runApp()
runApp('~/Desktop/apps.R')
runApp('apps.R')
setwd("~/Documents/info/health_care")
runApp('apps.R')
runApp()
runApp()
setwd("~/Documents/info/health_care")
runApp()
runApp()
runApp()
runApp('data')
runApp()
runApp('data')
runApp('data/apps.R')
setwd("~/Documents/info/health_care/data")
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('~/Documents/info/health_care')
runApp('~/Documents/info/health_care')
setwd("~/Documents/info/health_care")
runApp()
runApp()
setwd("~/Documents/info/health_care/data")
runApp('~/Documents/info/health_care')
runApp('~/Documents/info/health_care')
runApp()
setwd("~/Desktop/data")
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('~/Documents/info/health_care/data')
runApp('~/Documents/info/health_care/data')
runApp('~/Documents/info/health_care/apps.R')
runApp('~/Documents/info/health_care/apps.R')
runApp('~/Documents/info/health_care/apps.R')
runApp('~/Documents/info/health_care/apps.R')
runApp('~/Documents/info/health_care/apps.R')
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State))
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$?..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths)),
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
setwd("~/Documents/info/health_care")
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('data')
runApp('apps.R')
df <- data[data$..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
ggplot(data) +
geom_point(mapping = aes(x = Year, y = Deaths))
View(data)
ggplot(data1) +
geom_point(mapping = aes(x = Year, y = Deaths))
setwd("~/Documents/info/health_care/data")
data1 <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
data1 <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
df <- data[data$..State == input$State,]
df <-
#data[data$..State == input$State,]
ggplot(data1) +
geom_point(mapping = aes(x = Year, y = Deaths))
data1 <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
data1 <- read.csv('data/drug_induced_deaths_1999-2015.csv', stringsAsFactors = FALSE)
data1 <- read.csv('drug_induced_deaths_1999-2015.csv', stringsAsFactors = FALSE)
View(data1)
df <-
#data[data$..State == input$State,]
ggplot(data1) +
geom_point(mapping = aes(x = Year, y = Deaths))
View(df)
df
runApp('~/Documents/info/health_care/apps.R')
runApp('~/Documents/info/health_care/apps.R')
setwd("~/Documents/info/health_care")
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
setwd("~/Documents/info/health_care")
runApp('apps.R')
setwd("~/Documents/info/health_care/data")
runApp()
runApp('~/Documents/info/health_care/apps.R')
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State))
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$?..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths)),
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
setwd("~/Documents/info/health_care")
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State))
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$?..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths)),
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$?..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths)),
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$?..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$..State == input$State,]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$State == input$State, ]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$State == input$State, ]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$State == input$State, ]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data[data$State == input$State, ]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
data1 <- read.csv("data/drug_induced_deaths_1999-2015.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Deaths by Drugs in 1999-2015"),
sidebarLayout(
sidebarPanel(
selectizeInput("?..State",
label = "State:",
choices = data1$State)),
mainPanel(
plotOutput("trendPlot"))
)
)
server <- function(input, output) {
output$trendPlot <- renderPlot({
df <- data1[data1$State == input$State, ]
ggplot(df) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
}
shinyApp(ui = ui, server = server)
View(data1)
runApp('apps.R')
runApp('apps.R')
ggplot(data1) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
output$trendPlot <- renderPlot({
#df <- data1[data1$State == input$State, ]
ggplot(data1) +
geom_point(mapping = aes(x = Year, y = Deaths))
xlab = "Year"
ylab = "Deaths"
})
runApp('apps.R')
runApp('apps.R')
runApp('apps.R')
